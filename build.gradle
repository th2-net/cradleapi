plugins {
	id "com.jfrog.bintray" version '1.8.5' apply false
}

ext {
	slf4j_version = '1.7.26'
	jackson_version = '2.9.7'

	sharedDir = file("${project.rootDir}/shared")
}

subprojects {
	repositories {
		jcenter()
	}
	
	apply plugin: 'java-library'
	apply plugin: 'maven'
	apply plugin: 'maven-publish'
	apply plugin: 'com.jfrog.bintray'
	
	defaultTasks 'build'
	
	sourceCompatibility = 1.8 //Java version compatibility to use when compiling Java source.
	targetCompatibility = 1.8 //Java version to generate classes for.
	compileJava.options.debugOptions.debugLevel = 'source,lines,vars' // Include debug information

	version = release_version
	group   = 'com.exactpro.th2'
	
	jar {
		manifest {
			attributes(
					'Created-By':               "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
					'Specification-Title':      '',
					'Specification-Vendor':     'Exactpro Systems LLC',
					'Implementation-Title':     project.archivesBaseName,
					'Implementation-Vendor':    'Exactpro Systems LLC',
					'Implementation-Vendor-Id': 'com.exactpro',
					'Implementation-Version':   project.version,
					'Implementation-Version-Date': getDate()
			)
		}
	}

	java {
		withJavadocJar()
		withSourcesJar()
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java
			}
			bintrayPublication(MavenPublication) {
				from components.java
				groupId group
				artifactId project.name
				version project.version
				pom.withXml {
					def root = asNode()
					root.appendNode('name', project.name)
					root.appendNode('url', project.vcs_url)
				}
			}
		}

		repositories {
			maven {
				name = 'localRepo'
				url = sharedDir
			}
		}
	}

	bintray {
		user = "${bintray_user}"
		key = "${bintray_key}"
		publications = ['bintrayPublication']
		pkg {
			repo = 'th2'
			name = project.name
			userOrg = 'exactpro'
			licenses = ['Apache-2.0']
			vcsUrl = project.vcs_url
			version {
				name = project.version
				desc = project.version
				released  = new Date()
			}
		}
		publish = true
	}
}

static def getDate() {
	def date = new Date()
	def formattedDate = date.format('yyyyMMdd-HH:mm:ss.SSS')
	return formattedDate
}